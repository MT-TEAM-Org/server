plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco' // jacoco
    id 'org.sonarqube' version '4.4.1.3373'
}

group = 'org.myteam'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // CHAT
    //	web socket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.webjars:webjars-locator-core'
    implementation 'org.webjars:sockjs-client:1.5.1'
    implementation 'org.webjars:stomp-websocket:2.3.4'
    // kafka
//    implementation 'org.springframework.kafka:spring-kafka'

    compileOnly 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // P6Spy 의존성 추가
    implementation 'p6spy:p6spy:3.9.1'
    implementation 'com.github.gavlyukovskiy:datasource-decorator-spring-boot-autoconfigure:1.9.0'

    // spring boot mail 의존성 추가
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '3.3.4'

    // h2 database
    runtimeOnly 'com.h2database:h2'

    // spring-boot-starter-validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Jwt
    implementation 'io.jsonwebtoken:jjwt:0.12.6'

    //Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // mysql-connector 추가
    implementation group: 'com.mysql', name: 'mysql-connector-j', version: '8.3.0'

    // imgscalr-lib
    implementation group: 'org.imgscalr', name: 'imgscalr-lib', version: '4.2'

    // commons-io
    implementation 'commons-io:commons-io:2.14.0'

    // Swagger
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.6.0'

    // Minio
    implementation 'io.minio:minio:8.5.11'

    // S3
    implementation(platform("software.amazon.awssdk:bom:2.21.1"))
    implementation("software.amazon.awssdk:s3")

    // TestContainer core
    testImplementation "org.testcontainers:testcontainers:1.19.0"
    testImplementation "org.testcontainers:junit-jupiter:1.19.0"

    // TestContainer Image
    testImplementation 'org.testcontainers:mysql:1.19.0'
    testImplementation 'org.testcontainers:minio:1.19.7'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // Redisson
    implementation 'org.redisson:redisson-spring-boot-starter:3.23.4'

    //openfeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.3'

    // thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // cookie-session
    implementation 'org.springframework.session:spring-session-core'

    // prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

}

test {
    jvmArgs '-Xms512m', '-Xmx1024m', '-XX:+HeapDumpOnOutOfMemoryError', '-XX:HeapDumpPath=build/heapdump.hprof'
}

tasks.named('test') {
    useJUnitPlatform()
//    ignoreFailures = true // 테스트 실패해도 report 파일 생성.
//    finalizedBy jacocoTestReport // Generates report after tests are run
    finalizedBy tasks.named('jacocoTestReport')
}

/**
 * QueryDSL Build Options
 */
def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDir querydslDir
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}

/**
 * Jacoco Build Options
 */
jacoco {
    toolVersion = "0.8.10"
    reportsDirectory = layout.buildDirectory.dir('jacocoReport')
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') { // qPattern = '**/QA', '**/QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dto/**',
                    '**/domain/**',
                    '**/entity/**',
                    '**/util/**',
                    '**/repository/**',
                    '**/controller/**',
                    '**/aop/**',
                    '**/exception/**',
                    '**/config/**',
                    "**/core/**",
                    "**/factory/**",
                    "**/strategy/**",
                    "**/global/**",
                    "**/oauth2/**",
                    "**/chat/**",
                    "**/upload/**",
                    "**/recommend/**",
                    '**/MemberRole*',
                    '**/SecurityReadService*'
            ] + Qdomains)
        }))
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }
    violationRules {
        rule {
            enabled = true;
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = [
                    '**/dto/**',
                    '**/domain/**',
                    '**/entity/**',
                    '**/util/**',
                    '**/repository/**',
                    '**/controller/**',
                    '**/aop/**',
                    '**/exception/**',
                    '**/config/**',
                    "**/core/**",
                    "**/factory/**",
                    "**/strategy/**",
                    "**/global/**",
                    "**/oauth2/**",
                    "**/chat/**",
                    "**/upload/**",
                    "**/recommend/**",
                    '**/MemberRole*',
                    '**/SecurityReadService*'
            ] + Qdomains
        }
    }
}

// SonarCloud config
sonar {
    properties {
        property "sonar.projectKey", "MT-TEAM-Org_server"
        property "sonar.organization", "playhive-static-analyze"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}