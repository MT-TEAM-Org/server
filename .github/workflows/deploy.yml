# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Deploy Play Hive Server to AWS

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
      
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
      
      - name: Set environment variables
        run: |
          echo "EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}" >> $GITHUB_ENV
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> $GITHUB_ENV
          echo "SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}" >> $GITHUB_ENV
        env:
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}

      - name: Build and Test with Gradle
        run: ./gradlew clean build --info
        env:
          EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}

      - name: List JAR Files
        run: ls -la build/libs/

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: spring-app
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: spring-app
      
      - name: Install Java on AWS
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Checking if Java is installed..."
            if ! java -version &> /dev/null; then
              echo "Java not found. Installing OpenJDK 17..."
              sudo apt update
              sudo apt install -y openjdk-17-jdk
            else
              echo "Java is already installed."
            fi

      - name: Deploy to AWS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "*.jar"
          target: "~/play-hive"

      - name: Restart Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Define variables
            DEPLOY_DIR=~/play-hive
            JAR_FILE=server-0.0.1-SNAPSHOT.jar

            # Kill process on port 8080
            echo "Finding and killing process on port 8080..."
            PID=$(sudo lsof -t -i:8080)
            if [ -n "$PID" ]; then
              echo "Killing process with PID $PID..."
              sudo kill -9 $PID
            else
              echo "No process found on port 8080."
            fi

            # Navigate to deployment directory
            echo "Navigating to deployment directory: $DEPLOY_DIR"
            cd $DEPLOY_DIR || exit

            # Start the new server
            echo "Starting new server: $JAR_FILE"
            nohup java -jar $JAR_FILE > app.log 2>&1 &
            echo "Server started. Logs can be found in $DEPLOY_DIR/app.log"
