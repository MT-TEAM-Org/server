name: Deploy Play Hive Prod Server to AWS

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: main  # 명확하게 main 브랜치 지정

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: List Files in Current Directory
        run: ls -la

      - name: Copy docker-compose-prod.yml to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.PROD_AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          source: ./docker-compose.yml
          target: ~/play-hive/

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build Docker Image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/prod:latest .

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/prod:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Install Java on AWS
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PROD_AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            echo "Checking if Java is installed..."
            if ! java -version &> /dev/null; then
              echo "Java not found. Installing OpenJDK 17..."
              sudo apt update
              sudo apt install -y openjdk-17-jdk
            else
              echo "Java is already installed."
            fi

      - name: Deploy to AWS and Restart Services with Docker Compose
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PROD_AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            # 이동할 디렉토리 설정
            DEPLOY_DIR=~/play-hive

            echo "Navigating to deployment directory: $DEPLOY_DIR"
            cd $DEPLOY_DIR || exit

            # 최신 Docker 및 Docker Compose 설치 확인
            echo "Ensuring Docker and Docker Compose are installed..."
            
            # Docker 설치 여부 확인
            if ! docker --version &>/dev/null; then
              echo "Docker is not installed. Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "Docker is already installed."
            fi
            
            # Docker Compose 설치 여부 확인
            if ! docker-compose --version &>/dev/null; then
              echo "Docker Compose is not installed. Installing Docker Compose..."
              sudo apt-get update
              sudo apt-get install -y docker-compose
            else
              echo "Docker Compose is already installed."
            fi

            # 기존 컨테이너 중지 및 제거
            echo "Stopping and removing existing containers..."
            sudo docker-compose down || true
            
            # 최신 이미지를 가져오기
            echo "Pulling the latest Docker image..."
            sudo docker-compose pull
            
            # 컨테이너 재실행
            echo "Starting containers with Docker Compose..."
            sudo docker-compose up -d
            
            # 사용하지 않는 이미지 제거
            echo "Removing unused Docker images..."
            sudo docker image prune -f
            
            echo "Deployment completed successfully!"

      - name: Health Check After Deployment
        run: |
          echo "Starting Health Check..."
          for i in {1..5}
          do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.PROD_HEALTH_CHECK_URL }})
          if [ "$HTTP_STATUS" -eq 200 ]; then
           echo ":흰색_확인_표시: Health Check Passed (200 OK)"
           exit 0
          fi
          echo "Waiting for server to be ready... Retry ($i/5)"
          sleep 5
          done
          echo ":x: Health Check Failed after retries."
          exit 1

      - name: Send Slack Notification (Success)
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          fields: repo,message,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Notification (Failure)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Copy Monitoring Files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.PROD_AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          source: ./monitoring/
          target: ~/play-hive/monitoring/

      - name: Deploy Prometheus & Grafana
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PROD_AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            cd ~/play-hive/monitoring
            echo "Launching Prometheus & Grafana containers..."
            docker-compose -f docker-compose.monitoring.yml up -d