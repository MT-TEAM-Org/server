name: Deploy Play Hive Prod Server to AWS

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: main  # 명확하게 main 브랜치 지정

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: List Files in Current Directory
        run: ls -la

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.PROD_AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          source: ./docker-compose.yml
          target: ~/play-hive/

      - name: Copy Monitoring Files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          source: monitoring/docker-compose.monitoring.yml
          target: ~/play-hive/monitoring/

      - name: Copy Prometheus Config
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          source: monitoring/prometheus.yml
          target: ~/play-hive/monitoring/

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build Docker Image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/prod:latest .

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/prod:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Install Java on AWS
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PROD_AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            echo "Checking if Java is installed..."
            if ! java -version &> /dev/null; then
              echo "Java not found. Installing OpenJDK 17..."
              sudo apt update
              sudo apt install -y openjdk-17-jdk
            else
              echo "Java is already installed."
            fi

      - name: Copy green.yml + deploy.sh
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          source: |
            deploy/docker-compose.green.yml
            deploy/deploy.sh
          target: ~/play-hive/deploy/

        - name: Run deploy.sh remotely
          uses: appleboy/ssh-action@v0.1.10
          with:
            host: ${{ secrets.PROD_AWS_SERVER_IP }}
            username: ${{ secrets.AWS_USERNAME }}
            key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
            script: |
              cd ~/play-hive/deploy
              chmod +x deploy.sh
              ./deploy.sh

      - name: Health Check After Deployment
        run: |
          echo "Starting Health Check..."
          for i in {1..5}
          do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.PROD_HEALTH_CHECK_URL }})
          if [ "$HTTP_STATUS" -eq 200 ]; then
           echo ":흰색_확인_표시: Health Check Passed (200 OK)"
           exit 0
          fi
          echo "Waiting for server to be ready... Retry ($i/5)"
          sleep 30
          done
          echo ":x: Health Check Failed after retries."
          exit 1

      - name: Send Slack Notification (Success)
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          fields: repo,message,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Notification (Failure)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Deploy Prometheus & Grafana
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.PROD_AWS_SERVER_IP }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          script: |
            cd ~/play-hive/monitoring/monitoring
            
            echo "Stopping & Removing existing containers (volumes preserved)..."
            sudo docker-compose -f docker-compose.monitoring.yml down --remove-orphans
            
            echo "Removing old Prometheus & Grafana images..."
            sudo docker image rm -f prom/prometheus || true
            sudo docker image rm -f grafana/grafana || true
            
            echo "Pulling latest images..."
            sudo docker-compose -f docker-compose.monitoring.yml pull
      
            echo "Recreating containers..."
            sudo docker-compose -f docker-compose.monitoring.yml up -d
            
            echo "Prometheus & Grafana deployment complete (without downtime)."
      