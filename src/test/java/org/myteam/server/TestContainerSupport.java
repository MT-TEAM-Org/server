package org.myteam.server;

import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.GenericContainer;
import org.testcontainers.containers.JdbcDatabaseContainer;
import org.testcontainers.containers.MinIOContainer;
import org.testcontainers.containers.MySQLContainer;

@ActiveProfiles("container")
public class TestContainerSupport extends TestDriverSupport {

    // MySql
    private static final String MYSQL_IMAGE = "mysql:8.0";
    private static final JdbcDatabaseContainer MYSQL;

    // minio
    private static final String MINIO_IMAGE = "minio/minio:latest";
    private static final String MINIO_BUCKET_NAME = "play-hive";
    private static final int MINIO_PORT = 9000;
    private static final MinIOContainer MINIO;

    // Redis
    private static final String REDIS_IMAGE = "redis:7.0.8-alpine";
    private static final int REDIS_PORT = 6379;
    private static final GenericContainer REDIS;

    static {
        // MySQL Ïª®ÌÖåÏù¥ÎÑà Ï¥àÍ∏∞Ìôî
        MYSQL = new MySQLContainer<>(MYSQL_IMAGE)
                .withDatabaseName("testdb")
                .withUsername("testuser")
                .withPassword("testpassword");
        //                .withInitScript("init.sql");
        MYSQL.start();

        // MinIO Ïª®ÌÖåÏù¥ÎÑà Ï¥àÍ∏∞Ìôî
        MINIO = new MinIOContainer(MINIO_IMAGE)
                .withUserName("testuser")
                .withPassword("testpassword")
                .withEnv("MINIO_ACCESS_KEY", "testuser")
                .withEnv("MINIO_SECRET_KEY", "testpassword")
                .withCommand("server /data")
                .withExposedPorts(MINIO_PORT);
        MINIO.start();

        // Redis Ïª®ÌÖåÏù¥ÎÑà Ï¥àÍ∏∞Ìôî
        REDIS = new GenericContainer(REDIS_IMAGE)
                .withExposedPorts(REDIS_PORT)
                .withCommand("redis-server --requirepass test")
                .withReuse(true);
        REDIS.start();
    }

    @DynamicPropertySource
    public static void overrideProps(DynamicPropertyRegistry registry) {

        // üí° (application-dev.ymlÏóê ÎßûÏ∂∞ ÏÑ§Ï†ï)
        // ‚úÖ MySQL ÏÑ§Ï†ï
        registry.add("spring.datasource.driver-class-name", MYSQL::getDriverClassName);
        registry.add("spring.datasource.url", MYSQL::getJdbcUrl);
        registry.add("spring.datasource.username", MYSQL::getUsername);
        registry.add("spring.datasource.password", MYSQL::getPassword);

        // ‚úÖ JPA ÏÑ§Ï†ï (Í∏∞Î≥∏Ï†ÅÏù∏ Í∞í Ïú†ÏßÄ)
        registry.add("spring.jpa.show-sql", () -> "false");
        registry.add("spring.jpa.hibernate.ddl-auto", () -> "create-drop");
        registry.add("spring.jpa.open-in-view", () -> "true");

        // ‚úÖ MinIO ÏÑ§Ï†ï (ÌôòÍ≤ΩÎ≥ÄÏàòÏóê ÎßûÏ∂∞ Ï†ÅÏö©)
        registry.add("minio.url", MINIO::getS3URL);
        registry.add("minio.port", () -> MINIO_PORT);
        registry.add("minio.access-key", () -> "testuser");
        registry.add("minio.secret-key", () -> "testpassword");
        registry.add("minio.region", () -> "north-east-2");
        registry.add("minio.bucket", () -> MINIO_BUCKET_NAME);

        // ‚úÖ Slack Webhook ÏÑ§Ï†ï
        registry.add("slack.webhook.url", () -> "https://mock-slack-webhook-url");

        // ‚úÖ ÌÖåÏä§Ìä∏ ÌôòÍ≤ΩÏóêÏÑú SENDER_EMAIL & SENDER_PASSWORD Ï∂îÍ∞Ä
        registry.add("SENDER_EMAIL", () -> "test-email@example.com"); // üí° Í∏∞Î≥∏ ÌÖåÏä§Ìä∏ Ïù¥Î©îÏùº
        registry.add("SENDER_PASSWORD", () -> "test-password"); // üí° Í∏∞Î≥∏ ÌÖåÏä§Ìä∏ Ìå®Ïä§ÏõåÎìú

        // üí° (application-mail.yml Ï†ÅÏö©)
        // ‚úÖ Î©îÏùº ÏÑ§Ï†ï
        registry.add("spring.mail.host", () -> "smtp.naver.com");
        registry.add("spring.mail.port", () -> "587");
        registry.add("spring.mail.username", () -> "test-email@example.com");
        registry.add("spring.mail.password", () -> "test-password");
        registry.add("spring.mail.properties.mail.smtp.auth", () -> "true");
        registry.add("spring.mail.properties.mail.smtp.timeout", () -> "5000");
        registry.add("spring.mail.properties.mail.smtp.starttls.enable", () -> "true");

        // Redis ÏÑ§Ï†ï
        registry.add("spring.data.redis.host", REDIS::getHost);
        registry.add("spring.data.redis.port", () -> REDIS.getMappedPort(REDIS_PORT)
                .toString());
        registry.add("spring.data.redis.password", () -> "test");
    }
}
